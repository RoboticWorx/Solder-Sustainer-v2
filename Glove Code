/* 
For the Solder Sustainer v2 project from RoboticWorx.
Build this project yourself at www.roboticworx.io!
*/

// Hi all! I've updated the Arduino code to now work with the ESP-IDF v5 port. There were driver issues with FastLED so I've switched to NeoPixel. 
// Best, Justin

// Import libraries
#include <Adafruit_NeoPixel.h>
#include <esp_now.h>
#include <WiFi.h>
#include <MCP342X.h>

MCP342X myADC; // Create ADC object

#define FL_PIN 2 // Define the pin connected to the data input of the flashlight LED strip
#define BAT_PIN 10 // Define the pin connected to the battery LED
#define NUM_LEDS 3 // Define the number of LEDs in the flashlight strip
#define NUM_LEDS_BAT 1 // Define the number of LEDs in the battery strip

Adafruit_NeoPixel leds = Adafruit_NeoPixel(NUM_LEDS, FL_PIN, NEO_GRB + NEO_KHZ800); // Flashlight LEDs
Adafruit_NeoPixel battLeds = Adafruit_NeoPixel(NUM_LEDS_BAT, BAT_PIN, NEO_GRB + NEO_KHZ800); // Battery LED

// Data structure to hold the data being sent wirelessly
typedef struct struct_message {
  int a; // Pedal 1 (Extrude)
  int b; // Pedal 2 (Retract)
} struct_message;
struct_message dataRecieved;

const int freq = 260; // Motor driver frequency
const int resolution = 8; // 8-bit speed resolution for each channel (0-255)

// Define which pins are connected where
const int aIn1 = 3;
const int aIn2 = 4;
const int bIn1 = 5;
const int bIn2 = 6;
const int enablePin = 7;

bool checkPower = true; // Check battery level on start-up

unsigned long previousMillis = 0; // Store the last time LED colors were updated

void setup() {
  Serial.begin(115200);
  
  Wire.begin(1, 0); // SDA_PIN and SCL_PIN

  myADC.configure(MCP342X_MODE_CONTINUOUS | MCP342X_CHANNEL_1 | MCP342X_SIZE_16BIT | MCP342X_GAIN_1X); // Configure ADC IC

  pinMode(enablePin, OUTPUT); // Define as output pin
  digitalWrite(enablePin, HIGH); // Activate motor driver IC

  WiFi.mode(WIFI_STA); // Set device as a Wi-Fi Station

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) 
  {
    Serial.println("ESP-NOW Initialization Failed");
    return;
  }

  esp_now_register_recv_cb(callData); // Get wireless data

  // Initialize NeoPixel strips
  leds.begin();
  battLeds.begin();
  
  leds.setBrightness(200);
  battLeds.setBrightness(200);

  ledcAttach(aIn1, freq, resolution); // Attach PWM functionalities
  ledcAttach(aIn2, freq, resolution);
  ledcAttach(bIn1, freq, resolution);

  pinMode(bIn2, INPUT_PULLDOWN);

  // Buzz twice
  buzz(250, 250);
  buzz(250, 250);
}

void loop() {
  unsigned long currentMillis = millis(); // Get the current time

  if ((currentMillis - previousMillis >= 120000) || checkPower) // Every 2 minutes, update battery color
  { 
    static int16_t result;

    myADC.startConversion();
    myADC.getResult(&result);

    int ledColor = map(result, 15010, 19161, 0, 255); // Map the battery voltage to a color

    battLeds.setPixelColor(0, battLeds.Color(255 - ledColor, 0, ledColor)); // Set battery LED to the current color
    battLeds.show(); // Show the updated battery LED color

    checkPower = false;
    previousMillis = currentMillis;
  }

  // If-else action chain for pedals
  if (dataRecieved.a == 1 && dataRecieved.b == 1) 
  { // Both pedals pressed
    retract(0);
    extrude(0);
    uint32_t whiteColor = leds.Color(255, 255, 255); // Set flashlight LEDs to white (on)
    setFlashlightColor(whiteColor);
  } 
  else if (dataRecieved.a == 1 && dataRecieved.b == 0) 
  { // Extrude pedal pressed
    extrude(255);
    setFlashlightColor(0); // Turn off flashlight LEDs
  } 
  else if (dataRecieved.a == 0 && dataRecieved.b == 1) 
  { // Retract pedal pressed
    retract(255);
    setFlashlightColor(0); // Turn off flashlight LEDs
  } 
  else 
  { // No pedals pressed
    retract(0);
    extrude(0);
    setFlashlightColor(0); // Turn off flashlight LEDs
  }

  leds.show(); // Show updated flashlight colors
}

void setFlashlightColor(uint32_t color) 
{
  for (int i = 0; i < NUM_LEDS; i++) 
  {
    leds.setPixelColor(i, color);
  }
  leds.show();
}

// Extrude motor function
void extrude(int speed) 
{
  ledcWrite(aIn2, speed);
  digitalWrite(aIn1, LOW);
}

// Retract motor function
void retract(int speed) 
{
  ledcWrite(aIn1, speed);
  digitalWrite(aIn2, LOW);
}

// Buzz motor function
void buzz(int timeOn, int timeOff) 
{
  ledcWrite(bIn1, 200); // Buzzing
  digitalWrite(bIn2, LOW);
  delay(timeOn); // Wait timeOn
  ledcWrite(bIn1, 0); // Stop buzzing
  digitalWrite(bIn2, LOW);
  delay(timeOff); // Wait timeOff
}

// Copy over wireless data
void callData(const esp_now_recv_info *recvInfo, const uint8_t *incomingData, int len) 
{
  memcpy(&dataRecieved, incomingData, sizeof(dataRecieved));
}
